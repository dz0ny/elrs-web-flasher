"use strict";(self.webpackChunkflasher=self.webpackChunkflasher||[]).push([[968],{2180:(t,e,i)=>{i.d(e,{F:()=>n,Z:()=>o});var r=i(7973),s=i(905);class n{static INIT_SEQ={CRSF:[236,4,50,this.ord("b"),this.ord("l")],GHST:[137,4,50,this.ord("b"),this.ord("l")]};static BIND_SEQ={CRSF:[236,4,50,this.ord("b"),this.ord("d")],GHST:[137,4,50,this.ord("b"),this.ord("d")]};static ord(t){return t.charCodeAt(0)}static calc_crc8(t,e=213){let i=0;for(let r=0;r<t.byteLength;r++){i^=t[r];for(let t=0;t<8;++t)i=0!=(128&i)?(i<<1^e)%256:(i<<1)%256}return i}static get_telemetry_seq(t,e=null){const i=new Uint8Array(t);let r=new Uint8Array;if(null!=e){const t=e.length;r=new Uint8Array(t);for(let i=0;i<t;i++)r[i]=e.charCodeAt(i)}const s=new Uint8Array(i.byteLength+r.byteLength+1);s.set(i,0),s.set([i[1]+r.byteLength],1),s.set(r,i.byteLength);const n=this.calc_crc8(s.slice(2,s.byteLength-1));return s.set([n],i.byteLength+r.byteLength),s}static get_init_seq(t,e=null){return this.get_telemetry_seq(this.INIT_SEQ[t],e)}static get_bind_seq(t,e=null){return this.get_telemetry_seq(this.BIND_SEQ[t],e)}}class o{constructor(t,e,i,r,s=!1,n=!1){this.transport=t,this.terminal=e,this.flash_target=i,this.baudrate=r,this.half_duplex=s,this.uploadforce=n}_validate_serialrx=(t,e)=>this.transport.write_string("get "+t+"\r\n").then((t=>this.transport.read_line({timeout:100}))).then((t=>{console.log(t);for(const i of e)if(-1!==t.trim().indexOf(" = "+i))return console.log("found"),!0;return console.log("NOT found"),!1}));_sleep(t){return new Promise((e=>setTimeout(e,t)))}log(t){this.terminal.writeln(t)}edgeTX=()=>{this.log("======== PASSTHROUGH INIT ========");const t=(t,e,i)=>this.transport.write_string(t).then((t=>this.transport.read_line({timeout:100}))).then((t=>{if(-1===t.indexOf(e))throw new s.n("Failed Passthrough Initialisation",`Wanted '${e}', but not found in response '${t}'`)})).then((t=>this._sleep(i)));return this.transport.set_delimiters(["> "]),t("set pulses 0\n","set: ",500).then((e=>t("set rfmod 0 power off\n","set: ",500))).then((e=>t("set rfmod 0 bootpin 1\n","set: ",100))).then((e=>t("set rfmod 0 power on\n","set: ",100))).then((e=>t("set rfmod 0 bootpin 0\n","set: ",0))).then((t=>{this.log("Enabling serial passthrough..."),this.transport.set_delimiters(["\n"]);const e="serialpassthrough rfmod 0 "+this.transport.baudrate.toString();return this.log(`  CMD: '${e}`),this.transport.write_string(e+"\n").then((t=>this.transport.read_line({timeout:200})))})).then((t=>this.log("======== PASSTHROUGH DONE ========"))).catch((t=>(this.log(t.message),this.log("======== PASSTHROUGH FAILED ========"),Promise.reject(t))))};betaflight=()=>(this.log("======== PASSTHROUGH INIT ========"),this.transport.write_string("#\r\n").then((t=>(this.transport.set_delimiters(["# ","CCC"]),this.transport.read_line({timeout:200})))).then((t=>{if(-1!==t.indexOf("CCC"))return void this.log("Passthrough already enabled and bootloader active");if(!t.trim().endsWith("#"))return void this.log("No CLI available. Already in passthrough mode?, If this fails reboot FC and try again!");this.transport.set_delimiters(["# "]);let e=[];e=this.half_duplex?["GHST"]:["CRSF","ELRS"];const i=[];return this._validate_serialrx("serialrx_provider",e).then((t=>{t||i.push("Serial Receiver Protocol is not set to CRSF! Hint: set serialrx_provider = CRSF")})).then((t=>this._validate_serialrx("serialrx_inverted",["OFF"]))).then((t=>{t||i.push("Serial Receiver UART is inverted! Hint: set serialrx_inverted = OFF")})).then((t=>this._validate_serialrx("serialrx_halfduplex",["OFF","AUTO"]))).then((t=>{t||i.push("Serial Receiver UART is not in full duplex! Hint: set serialrx_halfduplex = OFF")})).then((t=>this._validate_serialrx("rx_spi_protocol",["EXPRESSLRS"]))).then((t=>{t&&i.push("ExpressLRS SPI RX detected\n\nUpdate via betaflight to flash your RX\nhttps://www.expresslrs.org/2.0/hardware/spi-receivers/")})).then((t=>{if(i.length>0){let t="";this.log("[ERROR] Invalid serial RX configuration detected:\n");for(const e of i)this.log("    !!! "+e+" !!!"),t+=e+"\n";throw this.log("\n    Please change the configuration and try again!"),new s.n("Invalid serial RX configuration detected",t)}})).then((t=>(this.log("\nAttempting to detect FC UART configuration..."),this.transport.write_string("serial\r\n")))).then((async t=>{this.transport.set_delimiters(["\n"]);let e=!1;for(;;){const t=await this.transport.read_line({timeout:200});if(""===t)break;if(t.startsWith("serial")){const i=/serial (?<port>[0-9]+) 64 /,r=t.match(i);if(r&&r.groups&&r.groups.port){e=r.groups.port;break}}}if(!e)throw this.log("!!! RX Serial not found !!!!\n  Check configuration and try again..."),new s.n("Serial RX not found","Check flight controller RX configuration");return e})).then((t=>this.transport.write_string(`serialpassthrough ${t} ${this.transport.baudrate}\r\n`))).then((t=>this._sleep(200))).then((async t=>{try{for(let t=0;t<10;t++)await this.transport.read_line({timeout:200})}catch(t){}this.log("======== PASSTHROUGH DONE ========")}))})));reset_to_bootloader=()=>{let t;if(this.log("======== RESET TO BOOTLOADER ========"),this.half_duplex)this.log("Using half duplex (GHST)"),t=this.transport.write_array(n.get_init_seq("GHST"));else{this.log("Using full duplex (CRSF)");const e=new Uint8Array(32);e.fill(85),t=this.transport.write_array(new Uint8Array([7,7,18,32])).then((t=>this.transport.write_array(e))).then((t=>this._sleep(200))).then((t=>this.transport.rawRead({timeout:1}))).catch((t=>{})).then((t=>this.transport.write_array(n.get_init_seq("CRSF")))).then((t=>this._sleep(200)))}return t.then((t=>(this.transport.set_delimiters(["\n"]),this.transport.read_line({timeout:200})))).then((t=>t.trim())).then((t=>(console.log("got string "+t),t))).then((async t=>{if(console.log("rxtarget "+t),""===t)this.log("Cannot detect RX target, blindly flashing!");else if(this.uploadforce)this.log(`Force flashing ${this.flash_target}, detected ${t}`);else if(t.toUpperCase()!==this.flash_target.toUpperCase()){if("confirm"!==await(0,r.Q)({type:"question",title:"Targets Mismatch",message:`Wrong target selected your RX is '${t}', trying to flash '${this.flash_target}'`,confirmText:"Flash anyway",cancelText:"Cancel"}))throw this.log(`Wrong target selected your RX is '${t}', trying to flash '${this.flash_target}'`),new s.P}else""!==this.flash_target&&this.log(`Verified RX target '${this.flash_target}'`);return this.log("======== BOOTLOADER ENGAGED ========"),this._sleep(500)}))}}},5965:(t,e,i)=>{i.d(e,{M:()=>s});var r=i(3820);class s extends r.J{ui8ToBstr(t){let e="";for(let i=0;i<t.length;i++)e+=String.fromCharCode(t[i]);return e}bstrToUi8(t){const e=t.length,i=new Uint8Array(e);for(let r=0;r<e;r++)i[r]=t.charCodeAt(r);return i}set_delimiters(t=["\n","CCC"]){this.delimiters=[];for(const e of t)this.delimiters.push(this.bstrToUi8(e))}read_line=async({timeout:t=0}={})=>{let e;console.log("Read with timeout "+t);let i=this.left_over;this.left_over=new Uint8Array;const r=this.delimiters;function s(t){const e=t.findIndex(((t,e,i)=>{for(const t of r)if(t.every(((t,r)=>i[e+r]===t)))return!0;return!1}));if(-1!==e)for(const i of r)if(i.every(((i,r)=>t[e+r]===i)))return e+i.length;return-1}let n=s(i);if(-1===n){const r=this.device.readable.getReader();try{t>0&&(e=setTimeout((function(){r.cancel()}),t));do{const{value:t,done:e}=await r.read();if(e)return r.releaseLock(),await this.device.close(),await this.device.open({baudRate:this.baudrate}),"";i=new Uint8Array(this._appendBuffer(i.buffer,t.buffer)),n=s(i)}while(-1===n);r.releaseLock()}finally{t>0&&clearTimeout(e)}}return this.left_over=i.slice(n),i=i.slice(0,n),this.tracing&&(console.log("Read bytes"),console.log(this.hexdump(i))),this.ui8ToBstr(i)};write_string=async t=>{const e=this.device.writable.getWriter(),i=this.bstrToUi8(t);this.tracing&&(console.log("Write bytes"),console.log(this.hexdump(i))),await e.write(i.buffer),e.releaseLock()};write_array=async t=>{const e=this.device.writable.getWriter();this.tracing&&(console.log("Write bytes"),console.log(this.hexdump(t))),await e.write(t.buffer),e.releaseLock()}}},5968:(t,e,i)=>{i.r(e),i.d(e,{XmodemFlasher:()=>h});var r=i(5965),s=i(2180),n=i(7973);const o=function(){},a=function(){};class l{XMODEM_MAX_TIMEOUTS=5;XMODEM_MAX_ERRORS=10;XMODEM_CRC_ATTEMPTS=3;XMODEM_OP_MODE="crc";XMODEM_START_BLOCK=1;timeout_seconds=10;block_size=128;constructor(t,e){this.device=t,this.logger=e}emit=(t,e)=>{console.log(`${t}: ${e}`)};crc16xmodem=function(t){let e=0;for(let i=0;i<t.length;i++){let r=e>>>8&255;r^=255&t[i],r^=r>>>4,e=e<<8&65535,e^=r,r=r<<5&65535,e^=r,r=r<<7&65535,e^=r}return e};send=async t=>{const e=this,i=[];let r=this.XMODEM_START_BLOCK,s=!1;o(t.length);for(let t=0;t<this.XMODEM_START_BLOCK;t++)i.push("");for(;t.length>0;){const e=t.slice(0,this.block_size),r=new Uint8Array(this.block_size);r.set(e,0);for(let t=e.length;t<this.block_size;t++)r[t]=26;t=t.slice(this.block_size),i.push(r)}let n=!0;e.emit("ready",i.length-1);const l=this.sendBlock,h=this.write,c=async t=>{if(67===t[0]&&r===e.XMODEM_START_BLOCK)o("[SEND] - received C byte for CRC transfer!"),e.XMODEM_OP_MODE="crc",i.length>r&&(e.emit("start",e.XMODEM_OP_MODE),await l(r,i[r],e.XMODEM_OP_MODE),e.emit("send",r),r++);else if(21===t[0]&&r===e.XMODEM_START_BLOCK)o("[SEND] - received NAK byte for standard checksum transfer!"),e.XMODEM_OP_MODE="normal",i.length>r&&(e.emit("start",e.XMODEM_OP_MODE),await l(r,i[r],e.XMODEM_OP_MODE),e.emit("send",r),r++);else if(6===t[0]&&r>e.XMODEM_START_BLOCK)if(o("ACK RECEIVED"),e.emit("recv","ACK"),i.length>r){if(await l(r,i[r],e.XMODEM_OP_MODE),e.emit("send",r),r++,r%10==0){const t=Math.floor(100*r/i.length);e.logger.log(`${t}% uploaded...`),document.getElementById("progressBar").value=t,document.getElementById("status").innerHTML=`Flashing: ${t}% uploaded... please wait`}}else i.length===r&&(!1===s?(s=!0,o("WE HAVE RUN OUT OF STUFF TO SEND, EOT EOT!"),e.emit("send","EOT"),await h(new Uint8Array([4]))):(o("[SEND] - Finished!"),e.emit("stop",0),document.getElementById("progressBar").value=100,document.getElementById("status").innerHTML="Flashing complete",n=!1));else 21===t[0]&&r>e.XMODEM_START_BLOCK?r===i.length&&s?(o("[SEND] - Resending EOT, because receiver responded with NAK."),e.emit("send","EOT"),await h(new Uint8Array([4]))):(o("[SEND] - Packet corruption detected, resending previous block."),e.emit("recv","NAK"),r--,i.length>r&&(await l(r,i[r],e.XMODEM_OP_MODE),e.emit("send",r),r++)):(a("GOT SOME UNEXPECTED DATA which was not handled properly!"),a("===>"),a(t),a("<==="),a("blockNumber: "+r))};for(;n;){const t=this.device.readable.getReader(),{value:e,done:i}=await t.read();if(i)throw t.releaseLock(),new Error("cancelled");t.releaseLock(),await c(e)}this.logger.log("Flash complete!")};sendBlock=async(t,e,i)=>{function r(t,e){const i=new Uint8Array(t.byteLength+e.byteLength);return i.set(t,0),i.set(e,t.byteLength),i}let s=0,n=r(new Uint8Array([1,t,255-t]),e);if(o("SENDBLOCK! Data length: "+e.byteLength),o(n),"crc"===i){const t=this.crc16xmodem(e);n=r(n,new Uint8Array([t>>>8&255,255&t]))}else{for(let t=3;t<n.byteLength;t++)s+=n.readUInt8(t);s%=256,n=r(n,new Uint8Array([s]))}o("Sending buffer with total length: "+n.length),await this.write(n)};write=async t=>{const e=this.device.writable.getWriter();await e.write(t.buffer),e.releaseLock()}}class h{constructor(t,e,i,r,s,n,o){this.device=t,this.config=r,this.options=s,this.firmwareUrl=n,this.terminal=o,this.xmodem=new l(this.device,this)}_sleep(t){return new Promise((e=>setTimeout(e,t)))}log(t){this.terminal.writeln(t)}connect=async()=>(this.config.firmware.startsWith("GHOST")?this.init_seq1=s.F.get_init_seq("GHST"):this.init_seq1=s.F.get_init_seq("CRSF"),this.transport=new r.M(this.device,!0),await this.transport.connect({baud:42e4}),this.passthrough=new s.Z(this.transport,this.terminal,this.config.firmware),"XModem Flasher");flash=async(t,e=!1)=>{this.log("Beginning flash..."),this.transport.set_delimiters(["CCC"]);let i=(await this.transport.read_line({timeout:2e3})).endsWith("CCC");if(i)this.log("\nWe were already in bootloader\n");else{let t=500;await this.passthrough.betaflight(),this.transport.set_delimiters(["CCC"]);if(i=(await this.transport.read_line({timeout:2e3})).endsWith("CCC"),i)this.log("\nWe were already in bootloader\n");else{this.transport.set_delimiters(["\n","CCC"]);let r=0;for(this.log("\nAttempting to reboot into bootloader...\n");!i;){if(r++,r>10)throw await(0,n.Q)({type:"error",title:"Flashing Failed",message:"Failed to enter bootloader mode in a reasonable time"}),new Error("[FAILED] to get to BL in reasonable time");this.log(`[${r}] retry...`),await this.transport.write(this.init_seq1);const s=Date.now();do{const r=await this.transport.read_line({timeout:2e3});if(""===r)continue;if(-1!==r.indexOf("BL_TYPE")){const e=r.substring(8).trim();this.log(`    Bootloader type found : '${e}`),t=100;continue}const s=r.match(/=== (?<version>[vV].*) ===/);if(s&&s.groups&&s.groups.version)this.log(`    Bootloader version found : '${s.groups.version}'`);else{if(-1!==r.indexOf("hold down button")){this._sleep(t),await this.transport.write_string("bbbbbb"),i=!0;break}if(-1!==r.indexOf("CCC")){i=!0;break}if(-1!==r.indexOf("_RX_")){const t=this.config.firmware.toUpperCase();if(r.trim()!==t&&!e){if("confirm"===await(0,n.Q)({type:"question",title:"Targets Mismatch",message:`Wrong target selected your RX is '${r.trim()}', trying to flash '${t}'`,confirmText:"Flash anyway",cancelText:"Cancel"})){e=!0;continue}return void this.log(`Wrong target selected your RX is '${r.trim()}', trying to flash '${t}'`)}""!==t&&this.log(`Verified RX target '${t}'`)}}}while(Date.now()-s<2e3)}this.log(`    Got into bootloader after: ${r} attempts`),this.log("Wait sync..."),this.transport.set_delimiters(["CCC"]);if(-1===(await this.transport.read_line({timeout:15e3})).indexOf("CCC"))return await(0,n.Q)({type:"error",title:"Flashing Failed",message:"Unable to communicate with bootloader"}),void this.log("[FAILED] Unable to communicate with bootloader...");this.log(" sync OK\n")}}return this.xmodem.send(t[0])};checkStatus=t=>{if(!t.ok)throw new Error(`HTTP ${t.status} - ${t.statusText}`);return t};fetchFile=async(t,e=(t=>t))=>{const i=await fetch(t),r=await this.checkStatus(i).blob();return e(await new Promise(((t,e)=>{const i=new FileReader;i.onload=function(){t(new Uint8Array(i.result))},i.readAsArrayBuffer(r)})))}}}}]);